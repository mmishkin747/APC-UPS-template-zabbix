use std::collections::HashMap;
use clap::Parser;
use json::JsonValue;
use std::env;
use std::error::Error;
use std::io::{stdin, Read};
use std::net::{SocketAddr, IpAddr};
use tokio::net::UdpSocket;
use std::ops::RangeInclusive;
use futures::executor::block_on;




type MyResult<T> = Result<T, Box<dyn Error>>;

#[derive(Parser)]
#[command(name = "Rups")]
#[command(author = "Mikhail Vasilchyk <mmishkin747@gmail.com>")]
#[command(version = "0.1")]
#[command(about = "Rust check state UPS")]
struct Cli {
    /// User's name for connecting ups
    #[arg(short, long)]
    user: Option<String>,
    /// Password for connecting ups
    #[arg(short, long)]
    password: Option<String>,
    /// Network ipv4 address server
    ipaddr: IpAddr,
    /// Network port to use
    #[arg( long, value_parser = port_in_range, default_value_t = 2001)]
    port: u16,
}
#[derive(Debug)]
pub struct Config {
    addr: IpAddr,
    port: u16,
    user: String,
    passw: String,
    commands: HashMap<String, String>
}

pub fn get_args() -> MyResult<Config <'a>> {
    let cli = Cli::parse();
    let mut user = String::new();
    let mut passw = String::new();
    if let Some(ref user_v) = cli.user {
        if let Some(ref passw_v) = cli.password {
            user = user_v.to_string();
            passw = passw_v.to_string();
        }
    }
    //this is hashmap stores commands for ups
    let commands = HashMap::from([
        ("main_voltage".to_string(), "O".to_string()),
        ("load".to_string(), "P".to_string()),
        ("temperature".to_string(), "C".to_string()),
        ("charge_battaries".to_string(), "0".to_string()),
        ("workin_hour".to_string(), "j".to_string()),
    ]);

    Ok(Config {
        addr: cli.ipaddr,
        port: cli.port,
        user,
        passw,
        commands,
    })
}

pub fn run(config: Config) -> MyResult<()> {
    block_on(async_run(config))?;
    Ok(())
}

async fn async_run(config: Config) -> MyResult<()>{
    let remote_addr: SocketAddr = SocketAddr::new(config.addr, config.port);
    
    // We use port 0 to let the operating system allocate an available port for us.
    let local_addr: SocketAddr = if remote_addr.is_ipv4() {
        "0.0.0.0:0"
    } else {
        "[::]:0"
    }
    .parse()?;
    let socket = UdpSocket::bind(local_addr).await?;
    const MAX_DATAGRAM_SIZE: usize = 65_507;
    socket.connect(&remote_addr).await?;

    let mut json_data = json::JsonValue::new_object();
    for (name, command) in config.commands{
            let mut data = vec![0u8; MAX_DATAGRAM_SIZE];
            socket.send(command.as_str().as_bytes()).await?;
            let len = socket.recv(&mut data).await?;
            let res  = String::from_utf8_lossy(&data[..len]).to_string();
            json_data[name] = res.into();
    }
    dbg!(&json_data);
    Ok(())


}




/// This func check valid number port
fn port_in_range(s: &str) -> Result<u16, String> {
    let port_range: RangeInclusive<usize> = 1..=65535;
    let port: usize = s
        .parse()
        .map_err(|_| format!("`{}` isn't a port number", s))?;
    if port_range.contains(&port) {
        Ok(port as u16)
    } else {
        Err(format!(
            "Port not in range {}-{}",
            port_range.start(),
            port_range.end()
        ))
    }
}


















fn get_stdin_data() -> Result<Vec<u8>, Box<dyn std::error::Error>> {
    let mut buf = Vec::new();
    stdin().read_to_end(&mut buf)?;
    Ok(buf)
}


async fn con() -> Result<(), Box<dyn Error>> {
    let remote_addr: SocketAddr = env::args()
        .nth(1)
        .unwrap_or_else(|| "127.0.0.1:8080".into())
        .parse()?;

    // We use port 0 to let the operating system allocate an available port for us.
    let local_addr: SocketAddr = if remote_addr.is_ipv4() {
        "0.0.0.0:0"
    } else {
        "[::]:0"
    }
    .parse()?;

    let socket = UdpSocket::bind(local_addr).await?;
    const MAX_DATAGRAM_SIZE: usize = 65_507;
    socket.connect(&remote_addr).await?;
    let data = get_stdin_data()?;
    socket.send(&data).await?;
    let mut data = vec![0u8; MAX_DATAGRAM_SIZE];
    let len = socket.recv(&mut data).await?;
    println!(
        "Received {} bytes:\n{}",
        len,
        String::from_utf8_lossy(&data[..len])
    );

    Ok(())
}

